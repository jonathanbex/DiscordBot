name: J DiscordBot Release CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: windows-latest
    if: "contains(github.event.head_commit.message, '-release')"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Restore dependencies
        run: dotnet restore DiscordBot
        
      - name: Build with dotnet
        run: dotnet build DiscordBot --configuration Release /clp:ErrorsOnly

      - name: dotnet publish
        run: dotnet publish BotApplication -c Release -o "${{env.DOTNET_ROOT}}/release" -p:DebugType=None

      - name: Set Initial Release Date and Generate GUID
        id: set_initial_release_date
        shell: pwsh
        run: |
          $releaseDate = Get-Date -Format 'yyyyMMdd'
          $guid = [guid]::NewGuid().ToString('N')  # Generate GUID without hyphens
          $releaseTag = "$releaseDate-$guid"
          
          echo "RELEASE_TAG=$releaseTag" >> $env:GITHUB_ENV
          echo "RELEASE_NAME=Release $releaseTag" >> $env:GITHUB_ENV

      - name: Create GitHub Release with gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        run: |
          gh release create "$RELEASE_TAG" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release $RELEASE_TAG" \
              --generate-notes

      - name: Upload Release Asset with gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        run: |
          gh release upload "$RELEASE_TAG" "${{env.DOTNET_ROOT}}/release"/* \
              --repo="$GITHUB_REPOSITORY"
